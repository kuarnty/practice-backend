type Query {
    hello: String
    users: [User!]!
    lectures: [Lecture!]!
    enrollments: [Enrollment!]!
}

# User type represents a registered user in the system.
type User {
    id: ID!
    name: String!
    email: String!
    password: String!
    createdAt: String!
}

"""Lecture type represents an online course or content."""
type Lecture {
    id: ID!
    title: String!
    description: String
    instructor: String!
    createdAt: String!
    updatedAt: String!
}

# Enrollment type tracks which user is enrolled in which lecture.
type Enrollment {
    id: ID!
    user: User!
    lecture: Lecture!
    progress: Float!
    grade: String
    enrolledAt: String!
    updatedAt: String!
}

type Mutation {
    #User
    createUser(name: String!, email: String!, password: String!): User!
    updateUser(id: ID!, name: String, email: String, password: String): User!
    deleteUser(id: ID!): Boolean!

    #Lecture
    createLecture(title: String!, description: String!, instructor: String!): Lecture!
    updateLecture(id: ID!, title: String, description: String, instructor: String): Lecture!
    deleteLecture(id: ID!): Boolean!
    
    #Enrollment
    createEnrollment(userId: ID!, lectureId: ID!): Enrollment!
    updateEnrollment(id: ID!, userId: ID, lectureId: ID): Enrollment!
    deleteEnrollment(id: ID!): Boolean!
}