# Server settings
# The port the application will listen on for HTTPS traffic.
server.port=8443

# SSL / TLS settings
# Enable SSL so Spring Boot will use the configured keystore.
server.ssl.enabled=true
# Keystore location:
# - For development you can place keystore.p12 in src/main/resources and use classpath:keystore.p12
# - For production, prefer an external path like file:/etc/ssl/keystore.p12
server.ssl.key-store=classpath:keystore.p12
# Do NOT commit the real keystore password to source control. Use an environment variable.
server.ssl.key-store-password=${SSL_KEYSTORE_PASSWORD}
# Keystore type: PKCS12 is recommended (standard and interoperable)
server.ssl.key-store-type=PKCS12
# Alias of the key entry in the keystore used for TLS.
server.ssl.key-alias=mykey
# Restrict TLS protocols to secure versions (adjust as needed for your environment)
server.ssl.enabled-protocols=TLSv1.2,TLSv1.3

# Optional: port to run a simple HTTP -> HTTPS redirector (if you implement one)
# Keep HTTP disabled by default; set to 0 to disable redirector.
app.http.port=8080

# MongoDB connection (use environment variable in production)
# Example default points to local MongoDB 'practice' database.
spring.data.mongodb.uri=${SPRING_DATA_MONGODB_URI:mongodb://localhost:27017/practice}

# GraphQL settings
# Location(s) for schema files
#spring.graphql.schema.locations=classpath:graphql/schema.graphqls
# HTTP path where GraphQL is exposed
#spring.graphql.path=/graphql

# Application logging
# Default root log level
logging.level.root=INFO
# Set app-specific debug level (change to INFO in production)
logging.level.com.example.practice=DEBUG

logging.level.org.springframework.graphql=DEBUG
logging.level.org.springframework.web=DEBUG
ogging.level.org.springframework.boot.autoconfigure=DEBUG

# Health / management (optional)
# management.endpoints.web.exposure.include=health,info
# management.endpoint.health.show-details=when-authorized

# Notes:
# - For development you can generate a self-signed keystore (PKCS12) with keytool and place it under src/main/resources.
# - In production, use a CA-signed certificate and keep the keystore/password out of version control (inject via env or secret manager).
# - If you terminate TLS at a reverse proxy (recommended for production), you can keep server.ssl.enabled=false and let the proxy handle certificates.